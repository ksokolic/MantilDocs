"use strict";(self.webpackChunkmantil_docs=self.webpackChunkmantil_docs||[]).push([[952],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),g=a,m=d["".concat(p,".").concat(g)]||d[g]||u[g]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9631:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:2},o="Testing in Mantil Project",s={unversionedId:"Usage/testing",id:"Usage/testing",title:"Testing in Mantil Project",description:"Unit tests",source:"@site/docs/Usage/testing.md",sourceDirName:"Usage",slug:"/Usage/testing",permalink:"/Usage/testing",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Using a Mantil API",permalink:"/Usage/api"},next:{title:"Data Storage",permalink:"/Usage/data_storage"}},p={},l=[{value:"Unit tests",id:"unit-tests",level:2},{value:"Integration tests",id:"integration-tests",level:2},{value:"End to end tests",id:"end-to-end-tests",level:2}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"testing-in-mantil-project"},"Testing in Mantil Project"),(0,a.kt)("h2",{id:"unit-tests"},"Unit tests"),(0,a.kt)("p",null,"Your API's in Mantil are pure Go code. They don't have anything AWS or Lambda\nspecific. Mantil provides all infrastructure burden. Unit testing you API'a are\nlike unit testing any other Go struct.",(0,a.kt)("br",{parentName:"p"}),"\n","Our example project ping also provides example of a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/mantil-io/template-ping/blob/master/api/ping/ping_test.go"},"trivial API\ntest"),".\nIt is there to show the idea of where and how to unit test API's."),(0,a.kt)("h2",{id:"integration-tests"},"Integration tests"),(0,a.kt)("p",null,"Integration tests are the category of tests that depend on some other\noutside resources. In the other example project,\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/mantil-io/template-excuses"},"excuses"),", we have examples of\nboth\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/mantil-io/template-excuses/blob/0a8c06a6d0d40fd4659c1538c772b7eaa8c7d5f5/api/excuses/excuses_test.go#L15"},"unit"),"\nand\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/mantil-io/template-excuses/blob/0a8c06a6d0d40fd4659c1538c772b7eaa8c7d5f5/api/excuses/excuses_test.go#L28"},"integration"),"\ntests. In unit we are mocking outside service with in process HTTP server. And in\nintegration we are using real URL from the internet. So holding your integration tests side-by-side with the unit or moving them to another place are both valid options. It really depends on project."),(0,a.kt)("h2",{id:"end-to-end-tests"},"End to end tests"),(0,a.kt)("p",null,"Mantil project holds end to end tests in ",(0,a.kt)("inlineCode",{parentName:"p"},"/test")," folder (from the project root).\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/mantil-io/template-ping/blob/master/test/ping_test.go"},"Here"),"\nis an example of an end to end test for our ping project. You can run it with the ",(0,a.kt)("inlineCode",{parentName:"p"},"mantil test"),". It uses the current project stage to run HTTP request against\ndeployed API's. "),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/gavv/httpexpect"},"httpexpect")," is a great library for quickly\nbuilding requests and examining HTTP responses."))}u.isMDXComponent=!0}}]);